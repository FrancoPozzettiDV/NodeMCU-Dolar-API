/*
Librerias:

https://github.com/bblanchon/ArduinoJson
https://github.com/adafruit/Adafruit-GFX-Library
https://github.com/adafruit/Adafruit_SSD1306
*/


#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ArduinoJson.h>
#include <ESP8266HTTPClient.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h> 

#include <WiFiClientSecureBearSSL.h>
// Fingerprint o huella digital del sitio a consultar. Si se quiere hacer una peticion a otro sitio, modificar estos valores.
const uint8_t fingerprint[20] = {0xe4, 0x7a, 0x77, 0x7a, 0xd4, 0x6e, 0x0e, 0xd8, 0x70, 0x19, 0xff, 0xe9, 0x5a, 0x92, 0xa4, 0x36, 0x20, 0x64, 0x41, 0xb6};

ESP8266WiFiMulti WiFiMulti;
Adafruit_SSD1306 display(128,64,&Wire,-1);

//Imagen de Davinci
// 'davinci', 128x64px
const unsigned char myBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x0f, 0x80, 0x00, 0x00, 0x38, 0x7c, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x70, 0x1e, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x60, 0x0f, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xc0, 0x07, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xf0, 0x7e, 0x00, 0x00, 0x80, 0x07, 0x83, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x80, 0x03, 0x80, 0x7c, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x80, 0x03, 0xc0, 0x3c, 0x98, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x1d, 0xb8, 0x00, 0x00, 0x07, 0x00, 
  0x00, 0x3e, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0f, 0x38, 0x00, 0x00, 0x07, 0x00, 
  0x00, 0x7f, 0x00, 0x00, 0x33, 0x00, 0x03, 0x00, 0x01, 0xc0, 0x0f, 0x10, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0xff, 0x80, 0x00, 0x73, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xc7, 0x80, 0x01, 0xf3, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x83, 0xc0, 0x03, 0xf3, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x1e, 0x20, 0x00, 0x00, 0x04, 0x00, 
  0x01, 0x01, 0xc0, 0x0f, 0x63, 0x00, 0x7b, 0x00, 0x00, 0xe0, 0x3c, 0x61, 0x86, 0x03, 0xcc, 0x00, 
  0x01, 0x01, 0xe0, 0x1c, 0x63, 0x01, 0xfb, 0x00, 0x00, 0x60, 0xfd, 0xe7, 0x8f, 0x07, 0xbc, 0x00, 
  0x01, 0x00, 0xe0, 0x78, 0x63, 0x03, 0xfb, 0x00, 0x00, 0x61, 0xfb, 0xef, 0x9e, 0x0f, 0xfc, 0x00, 
  0x01, 0x00, 0xf1, 0xe0, 0xe3, 0x07, 0x03, 0x00, 0x00, 0x77, 0x98, 0xeb, 0x3e, 0x19, 0x9c, 0x00, 
  0x01, 0x00, 0x73, 0x80, 0xe3, 0x1d, 0x81, 0x80, 0x00, 0x7f, 0x30, 0xe3, 0x6e, 0x31, 0x18, 0x00, 
  0x01, 0x80, 0x7f, 0x00, 0xc3, 0x19, 0x81, 0x80, 0x00, 0x7c, 0x30, 0xc7, 0x4e, 0x61, 0x18, 0x00, 
  0x01, 0x80, 0x3c, 0x00, 0xc2, 0x31, 0x81, 0x80, 0x00, 0xf0, 0x60, 0xc7, 0xcc, 0x63, 0x38, 0x00, 
  0x01, 0xc0, 0xf8, 0x00, 0xc6, 0x63, 0x00, 0xc0, 0x01, 0xf0, 0xe1, 0xc7, 0x9c, 0xc0, 0x38, 0x00, 
  0x00, 0xff, 0xfc, 0x01, 0xe6, 0xc3, 0x00, 0xe0, 0x03, 0xf0, 0xc1, 0x87, 0x1c, 0xc0, 0x30, 0x00, 
  0x00, 0x7f, 0x1c, 0x01, 0xe4, 0xc3, 0x00, 0x70, 0x06, 0x71, 0x81, 0x8f, 0x19, 0xc1, 0x30, 0x00, 
  0x00, 0x10, 0x1c, 0x01, 0xcd, 0x87, 0x80, 0x7c, 0x06, 0x73, 0x03, 0x8e, 0x39, 0x81, 0x70, 0x00, 
  0x00, 0x00, 0x0e, 0x01, 0x0d, 0x87, 0x80, 0x3f, 0xec, 0x73, 0x03, 0x8e, 0x39, 0x83, 0x70, 0x00, 
  0x00, 0x00, 0x0e, 0x00, 0x19, 0x8f, 0x00, 0x1f, 0xc8, 0x76, 0x03, 0x0c, 0x33, 0x83, 0x60, 0x00, 
  0x00, 0x00, 0x07, 0x00, 0x13, 0x0f, 0x00, 0x02, 0x18, 0x7c, 0x03, 0x1c, 0x73, 0x86, 0xe0, 0x00, 
  0x00, 0x00, 0x07, 0x80, 0x33, 0x1f, 0x00, 0x00, 0x18, 0x7c, 0x07, 0x1c, 0x73, 0x86, 0xe0, 0x00, 
  0x00, 0x00, 0x03, 0xc0, 0x63, 0x36, 0x00, 0x00, 0x18, 0x78, 0x06, 0x18, 0x63, 0x8c, 0xc0, 0x00, 
  0x00, 0x00, 0x03, 0xe1, 0xc3, 0x37, 0x80, 0x00, 0x18, 0x70, 0x07, 0xb8, 0x7b, 0x98, 0xf0, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0x83, 0xe7, 0x80, 0x00, 0x18, 0x70, 0x07, 0xb8, 0xfb, 0xf8, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0x03, 0xce, 0x00, 0x00, 0x08, 0x60, 0x06, 0x30, 0xe3, 0xf1, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x3c, 0x03, 0x8c, 0x00, 0x00, 0x00, 0x40, 0x0c, 0x60, 0xc1, 0xc1, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xba, 0xbf, 0xc8, 0x7e, 0xd5, 0xa2, 0x1d, 0xc4, 0xdf, 0x8b, 0x99, 0xeb, 0x6e, 0xb4, 0x00, 
  0x01, 0x6a, 0xb9, 0x4c, 0x49, 0x95, 0x22, 0x15, 0x0c, 0xaa, 0x1b, 0x99, 0xab, 0x4a, 0xb4, 0x00, 
  0x01, 0xfb, 0xbf, 0xd4, 0x6d, 0x15, 0xa5, 0x17, 0x8a, 0xcb, 0x9b, 0x99, 0xaf, 0x6a, 0xb4, 0x00, 
  0x01, 0xbb, 0xd9, 0xdc, 0x47, 0x15, 0x27, 0x15, 0x0e, 0xcb, 0x1f, 0x99, 0xaf, 0x4a, 0xb4, 0x00, 
  0x01, 0x2b, 0x5d, 0x54, 0x6e, 0xdd, 0x35, 0x15, 0x8a, 0xab, 0x15, 0x6d, 0xad, 0x4e, 0xde, 0x00, 
  0x01, 0x2b, 0x56, 0x34, 0x7c, 0xc9, 0xbd, 0x19, 0xca, 0xab, 0x95, 0x6e, 0x25, 0x6c, 0xcf, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {

  Serial.begin(115200);
  // Serial.setDebugOutput(true);
  delay(100); // se da una espera de 100ms para que el display inicie correctamente           
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  delay(1000);
  Serial.println();
  Serial.println();
  Serial.println();

  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("", ""); //Nombre y Contrase√±a de Red
    
  // animacion de introduccion
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.setTextSize(2);
  display.println("ESCUELA");
  display.setCursor(0,32);
  display.println("DAVINCI");
  display.display();
  display.startscrollright(0x00,0x05);
  delay(1500);
  display.invertDisplay(1);
  display.stopscroll();
  delay(1000);
  
   // muestra de imagen davinci
  display.invertDisplay(0);
  display.clearDisplay();
  display.setCursor(0,0);
  display.drawBitmap(0,0,myBitmap,128,64,WHITE);
  display.display();
  delay(3000);
}

void loop() {
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {

    std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);

    client->setFingerprint(fingerprint);

    HTTPClient https;

    Serial.print("[HTTPS] begin...\n");
    if (https.begin(*client, "https://www.dolarsi.com/api/api.php?type=dolar")) {  // HTTPS

      Serial.print("[HTTPS] GET...\n");
      // start connection and send HTTP header
      int httpCode = https.GET();

      // httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);

        // file found at server
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = https.getString();
          //Serial.println(payload);
          //ArduinoJson deserializador
          const size_t bufferSize = JSON_ARRAY_SIZE(6) + 13*JSON_OBJECT_SIZE(0) + 6*JSON_OBJECT_SIZE(1) + 3*JSON_OBJECT_SIZE(2) + 3*JSON_OBJECT_SIZE(6) + 3*JSON_OBJECT_SIZE(9) + 430;
          DynamicJsonDocument doc(bufferSize);
          deserializeJson(doc,payload);
          //Guarda valores de dolar oficial en variables
          JsonObject oficial = doc[0]["casa"];
          const char* onombre = oficial["nombre"]; 
          const char* ocompra = oficial["compra"]; 
          const char* oventa = oficial["venta"]; 
          //Guarda valores de dolar blue en variables
          JsonObject blue = doc[1]["casa"];
          const char* bnombre = blue["nombre"]; 
          const char* bcompra = blue["compra"]; 
          const char* bventa = blue["venta"]; 
          
          //Muestra datos por Serial
          Serial.print("Dolar: ");
          Serial.println(onombre);
          Serial.print("Compra: ");
          Serial.println(ocompra);
          Serial.print("Venta: ");
          Serial.println(oventa);
          Serial.println("------------");
          Serial.print("Dolar: ");
          Serial.println(bnombre);
          Serial.print("Compra:");
          Serial.println(bcompra);
          Serial.print("Venta:");
          Serial.println(bventa);
          
          //Muestra datos por OLED
          display.clearDisplay(); 
          display.setCursor(0, 0); 
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.println(onombre);
          display.print("Compra: ");
          display.println(ocompra); 
          display.print("Venta: ");
          display.println(oventa);
          display.println("-----------------");
          display.println(bnombre);
          display.print("Compra: ");
          display.println(bcompra); 
          display.print("Venta: ");
          display.println(bventa);
          display.display(); 
        }
      } else {
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }

      https.end();
    } else {
      Serial.printf("[HTTPS] Unable to connect\n");
    }
  }

  Serial.println("Wait 1 minute before next round...");
  delay(60000);
}
